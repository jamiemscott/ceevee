:root {

  color-scheme: light dark;

  --canvas: #e9e9e5 , #111111;
  --ink: light-dark(var(--purple-9) , var(--orange-9));
  
  --surface-1: light-dark(var(--purple-12) , var(--gray-12));
  --text-1: light-dark(var(--purple-2) , var(--orange-2));

  --spacing-block: var(--size-fluid-1);
  --spacing-inline: var(--size-fluid-2);

  --content-max-width: 1100px;
  --breakout-size: calc( (var(--breakout-max-width) - var(--content-max-width) ) / 2);
  --breakout-max-width: 1200px;
  --section-height: 100svh;

}

/* It's not ideal for components to reference individual light, dark or theme colors. 
// Instead, you should prefer to use these individual variables to build a set of theme-agnostic aliases. 
// This allows you to reference a custom property without worrying about its underlying value, which will dynamically adapt to the current context's theme. */

html {
  background: var(--canvas);
  color: var(--ink);
  font-family: var(--font-sans);
  height: 100vh;
}

body {
  background: inherit;
  color: inherit;
  container-type: inline-size;
}

body > .layout {
  
  max-width: 100svw;
  min-height: 100vh;
}

/*Layout Utilities*/
.layout-grid {
  align-items: center;
  display: grid;
    column-gap: var(--spacing-inline);
    row-gap: var(--spacing-block);
  grid-auto-columns: 1fr;
  grid-template-columns: [full-width] auto;
  grid-template-rows: 
    [header-start] auto 
    [header-end main-start] 1fr 
    [main-end footer-start] auto 
    [footer-end];
  justify-items: stretch;
}

.content-grid {
  display: grid;  
    column-gap: var(--spacing-inline);
    row-gap: var(--spacing-block);
  grid-auto-columns: 1fr;
  grid-template-rows: 
    [header] min-content
    [content] 1fr;
  padding-block: var(--spacing-block);
  padding-inline: var(--spacing-inline);
  width: clamp(300px, 75svw, var(--content-max-width));
  
  @container (min-width: 500px) { 
    grid-auto-rows: 1fr;
    grid-template-columns: 
      [full-width-start breakout-start] var(--size-fluid-4)
      [aside-primary-start] 1fr
      [aside-primary-end content-start] 2fr
      [content-end aside-secondary-start] 1fr 
      [aside-secondary-end] var(--size-fluid-4) 
      [breakout-end full-width-end];
  }
  
}

/*header*/
header[role="banner"] {
  align-items: center;
  display: grid;
    column-gap: var(--spacing-inline);
    row-gap: var(--spacing-block);
  height: var(--section-height);
  justify-content: center;
  grid-column: full-width;
  grid-row: header;
  grid-template-columns: [full-width] 1fr;
  grid-template-rows:
    [navigation] max-content
    [hero] auto;
}

nav:is([aria-label="Main"]) {
  background-color: var(--surface-1);
  color: var(--text-1);
  justify-content: center;
  grid-column: [full-width];
  grid-row: navigation;
  padding: var(--spacing-block) var(--spacing-inline);
/*   width: 10svw; */
}

header[role="banner"] nav ul {
  align-items: flex-start;
  display: flex;
  flex-flow: column nowrap;
  gap: var(--spacing-block);
  justify-content: center;
  list-style: none;
  margin: 0;
  padding: 0;
  width: max-content;

  @container (min-width: 500px) {
    flex-direction: row;
    gap: var(--spacing-inline);
    margin-inline: auto;
  }
}

header[role="banner"] section {
  justify-self: center;
  grid-column: full-width;
  grid-row: hero;
}

/*main*/
main {
  grid-row: main;
}

main section {
  height: var(--section-height);
  margin-inline:auto;
}

/* main section:nth-child(odd) {
  border-image: conic-gradient(silver 0 0) fill 0//0 100vw;
} */

section[aria-label="Introduction"] {
  padding-block: var(--spacing-block);
  padding-inline: var(--spacing-inline);
}

section:not([aria-label="Introduction"]) header {
  grid-column: auto;
  grid-row: header;
  
  @container (min-width: 500px) {
    grid-column: aside-primary;
    grid-row: auto;
  }
}

section:not([aria-label="Introduction"]) div:first-of-type {
  grid-column: auto;
  grid-row: content;
  
  @container (min-width: 500px) {
/*     grid-column: content / breakout-end; */
    grid-row: auto;
  }
}

section:not([aria-label="Introduction"]) :where(p) {
  max-width: fit-content;
}

/*footer*/
footer {
  grid-row: footer;
  padding: var(--spacing-block) var(--spacing-inline);
}

/* utility classes*/
.invisible {
  position: absolute; width: 0; height: 0;
}

.clipped { 
  width:50%;
  height: 445px;
  clip-path: polygon(-1220.1px 70.5px, -1220.1px 70.5px, -1205.4805px 90.7834px, -1163.636px 144.5072px, -1097.5875px 220.9818px, -1010.356px 309.5176px, -904.9625px 399.425px, -784.428px 480.0144px, -651.7735px 540.5962px, -510.02px 570.4808px, -362.1885px 558.9786px, -211.3px 495.4px, -211.3px 495.4px, -67.9432px 414.8812px, 60.3824px 357.6856px, 175.2896px 320.9044px, 278.3912px 301.6288px, 371.3px 296.95px, 455.6288px 303.9592px, 532.9904px 319.7476px, 604.9976px 341.4064px, 673.2632px 366.0268px, 739.4px 390.7px, 739.4px 390.7px, 807.7689px 412.1016px, 880.8352px 428.5328px, 957.3683px 439.5232px, 1036.1376px 444.6024px, 1115.9125px 443.3px, 1195.4624px 435.1456px, 1273.5567px 419.6688px, 1348.9648px 396.3992px, 1420.4561px 364.8664px, 1486.8px 324.6px, 1486.8px 324.6px, 1567.3985px 277.3158px, 1640.668px 251.4504px, 1707.9795px 241.2546px, 1770.704px 240.9792px, 1830.2125px 244.875px, 1887.876px 247.1928px, 1945.0655px 242.1834px, 2003.152px 224.0976px, 2063.5065px 187.1862px, 2127.5px 125.7px, 2127.5px 125.7px, 2164.7959px 27.895px, 2151.4752px -106.792px, 2098.5353px -267.249px, 2016.9736px -442.364px, 1917.7875px -621.025px, 1811.9744px -792.12px, 1710.5317px -944.537px, 1624.4568px -1067.164px, 1564.7471px -1148.889px, 1542.4px -1178.6px, 1542.4px -1178.6px, 1532.6762px -1196.9447px, 1505.9856px -1246.6136px, 1466.0494px -1319.5589px, 1416.5888px -1407.7328px, 1361.325px -1503.0875px, 1303.9792px -1597.5752px, 1248.2726px -1683.1481px, 1197.9264px -1751.7584px, 1156.6618px -1795.3583px, 1128.2px -1805.9px, 1128.2px -1805.9px, 925.0946px -1721.2789px, 643.7768px -1604.0712px, 307.7042px -1464.0503px, -59.6656px -1310.9896px, -434.875px -1154.6625px, -794.4664px -1004.8424px, -1114.9822px -871.3027px, -1372.9648px -763.8168px, -1544.9566px -692.1581px, -1607.5px -666.1px); 
  background-color: bisque;
}