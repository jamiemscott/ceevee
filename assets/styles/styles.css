:root {

  color-scheme: light dark;

  --canvas: #e9e9e5 , #111111;
  --ink: light-dark(var(--purple-9) , var(--orange-9));
  
  --surface-1: light-dark(var(--purple-12) , var(--gray-12));
  --text-1: light-dark(var(--purple-2) , var(--orange-2));

  --spacing-block: var(--size-fluid-1);
  --spacing-inline: var(--size-fluid-2);

  --content-max-width: 1100px;
  --breakout-size: calc( (var(--breakout-max-width) - var(--content-max-width) ) / 2);
  --breakout-max-width: 1200px;
  --section-height: 100svh;

}

/* It's not ideal for components to reference individual light, dark or theme colors. 
// Instead, you should prefer to use these individual variables to build a set of theme-agnostic aliases. 
// This allows you to reference a custom property without worrying about its underlying value, which will dynamically adapt to the current context's theme. */

html {
  background: var(--canvas);
  color: var(--ink);
  font-family: var(--font-sans);
  height: 100vh;
}

body {
  background: inherit;
  color: inherit;
  container-type: inline-size;
}

body > .layout {
  
  max-width: 100svw;
  min-height: 100vh;
}

/*Layout Utilities*/
.layout-grid {
  align-items: center;
  display: grid;
    column-gap: var(--spacing-inline);
    row-gap: var(--spacing-block);
  grid-auto-columns: 1fr;
  grid-template-columns: [full-width] auto;
  grid-template-rows: 
    [header-start] auto 
    [header-end main-start] 1fr 
    [main-end footer-start] auto 
    [footer-end];
  justify-items: stretch;
}

.content-grid {
  display: grid;  
    column-gap: var(--spacing-inline);
    row-gap: var(--spacing-block);
  grid-auto-columns: 1fr;
  grid-template-rows: 
    [header] min-content
    [content] 1fr;
  padding-block: var(--spacing-block);
  padding-inline: var(--spacing-inline);
  width: clamp(300px, 75svw, var(--content-max-width));
  
  @container (min-width: 500px) { 
    grid-auto-rows: 1fr;
    grid-template-columns: 
      [full-width-start breakout-start] var(--size-fluid-4)
      [aside-primary-start] 1fr
      [aside-primary-end content-start] 2fr
      [content-end aside-secondary-start] 1fr 
      [aside-secondary-end] var(--size-fluid-4) 
      [breakout-end full-width-end];
  }
  
}

/*header*/
header[role="banner"] {
  align-items: center;
  display: grid;
    column-gap: var(--spacing-inline);
    row-gap: var(--spacing-block);
  height: var(--section-height);
  justify-content: center;
  grid-column: full-width;
  grid-row: header;
  grid-template-columns: [full-width] 1fr;
  grid-template-rows:
    [navigation] max-content
    [hero] auto;
}

nav:is([aria-label="Main"]) {
  background-color: var(--surface-1);
  color: var(--text-1);
  justify-content: center;
  grid-column: [full-width];
  grid-row: navigation;
  padding: var(--spacing-block) var(--spacing-inline);
/*   width: 10svw; */
}

header[role="banner"] nav ul {
  align-items: flex-start;
  display: flex;
  flex-flow: column nowrap;
  gap: var(--spacing-block);
  justify-content: center;
  list-style: none;
  margin: 0;
  padding: 0;
  width: max-content;

  @container (min-width: 500px) {
    flex-direction: row;
    gap: var(--spacing-inline);
    margin-inline: auto;
  }
}

header[role="banner"] section {
  justify-self: center;
  grid-column: full-width;
  grid-row: hero;
}

/*main*/
main {
  grid-row: main;
}

main section {
  height: var(--section-height);
  margin-inline:auto;
}

/* main section:nth-child(odd) {
  border-image: conic-gradient(silver 0 0) fill 0//0 100vw;
} */

section[aria-label="Introduction"] {
  padding-block: var(--spacing-block);
  padding-inline: var(--spacing-inline);
}

section:not([aria-label="Introduction"]) header {
  grid-column: auto;
  grid-row: header;
  
  @container (min-width: 500px) {
    grid-column: aside-primary;
    grid-row: auto;
  }
}

section:not([aria-label="Introduction"]) div:first-of-type {
  grid-column: auto;
  grid-row: content;
  
  @container (min-width: 500px) {
/*     grid-column: content / breakout-end; */
    grid-row: auto;
  }
}

section:not([aria-label="Introduction"]) :where(p) {
  max-width: fit-content;
}

/*footer*/
footer {
  grid-row: footer;
  padding: var(--spacing-block) var(--spacing-inline);
}

/* utility classes*/
.invisible {
  position: absolute; width: 0; height: 0;
}